pragma solidity ^0.4.16;

contract owned{

      address public owner;

      function owned() public {

          owner = msg.sender;

      }

      modifier onlyOwner {

           require(msg.sender == owner);

           _;

      }

      function transferOwnership(addressnewOwner) onlyOwner public{

             owner = newOwner;

     }

}     

interface tokenRecipient{

    function receiveApproval(address _from,unit256 _value,address _token,bytes _extraData) external;

}



contract TokenERC20{

    string public name;

    string public symbol;

    uint public decimals = 18;

    unit256 public totalSupply;

    mapping(address => uint256) public balanceOf;

    mapping(address => mapping(address => uint256)) public allowance;



    event Transfer(address indexed from , address indexed to ,uint256 value);

    event Approval(address indexed _owner , address indexed _spender , uint256 _value);

    event Burn(address indexed from,uint256 value);





    function TokenERC20(

              uint256 initialSupply,

               string tokenName,

               string tokenSymbol ) public {

                                   totalSupply = initialSupply*10**uint256(decimals);

                                  balanceOf[msg.sender] = totalSupply;

                                  name = tokenName;

                                  symbol = tokenSymbol;

                      }

function _transfer(address _from,address _to ,uint _value) internal {

    require(_to != 0*0);

    require(balanceOf[_from] >= _value);

    require(balanceOf[_to] + _value>balanceOf[_to]);

    uint previousBalances = balanceOf[_from] + balanceOf[_to];

    balanceOf[_from] -= _value;

    balanceOf[_to]  += _value;

    emit Transfer(_from,_to,_value):

    assert(balanceOf[_from]+balanceOf[_to] == previousBalances);

}
